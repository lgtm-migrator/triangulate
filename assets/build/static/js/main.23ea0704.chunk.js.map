{"version":3,"sources":["components/Title.js","App.js","reportWebVitals.js","index.js"],"names":["Title","React","createElement","App","props","onFileChange","event","files","Array","from","target","setState","filesUpload","console","log","state","toggleButtonState","isLoading","fdata","FormData","forEach","d","append","data","width","height","shapes","type","imageType","shapeStroke","triangulate","triangulateBefore","strokeThickness","blurAmount","min","max","Object","entries","key","value","axios","post","headers","then","result","queue","identifier","poll","catch","error","image","timer","handleInputChange","bind","checked","name","this","setInterval","get","link","clearInterval","queueHolder","Image","src","fluid","shapeOptions","Row","Col","md","Form","Group","Check","onChange","label","id","controlId","Label","Control","imageUpload","imageUploadLabel","fileUpload","File","Container","column","mb","className","inline","Button","disabled","onClick","variant","href","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23ea0704.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title() {\n    return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"Triangulate.xyz - Randomly Generated Art\"));\n}\n\nexport default Title","import './App.css';\nimport React from \"react\";\nimport Title from \"./components/Title\";\nimport {Button, Col, Container, Form, Image, Row} from \"react-bootstrap\";\nimport axios from \"axios\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super (props);\n\n        this.state = {\n            queue: null,\n            image: \"\",\n            timer: null,\n            identifier: \"\",\n            isLoading: false,\n            width: 1200,\n            height: 675,\n            shapes: true,\n            shapeStroke: true,\n            triangulate: false,\n            triangulateBefore: false,\n            strokeThickness: 5,\n            blurAmount: 5,\n            min: 4,\n            max: 4,\n            imageType: \"random\",\n            filesUpload: null\n        };\n\n        this.handleInputChange = this.handleInputChange.bind (this);\n        this.onFileChange = this.onFileChange.bind (this)\n    }\n\n    onFileChange = event => {\n        const files = Array.from (event.target.files)\n        this.setState ({filesUpload: files});\n        console.log (this.state.filesUpload)\n    };\n\n    handleInputChange(event) {\n        const target = event.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        if (name === \"max\") {\n            if (value < this.state.min) {\n                value = this.state.min;\n            }\n        } else if (name === \"min\") {\n            if (value > this.state.max) {\n                value = this.state.max;\n            }\n        } else if (name === \"width\") {\n            if (value > 1200) {\n                value = 1200;\n            } else if (value < 0) {\n                value = 0;\n            }\n        } else if (name === \"height\") {\n            if (value > 1200) {\n                value = 1200;\n            } else if (value < 0) {\n                value = 0;\n            }\n        }\n        this.setState ({\n            [name]: value\n        });\n    }\n\n    poll() {\n        this.state.timer = setInterval (() => {\n            axios.get ('/api/v1/generate/' + this.state.identifier).then (result => {\n                this.setState ({\n                    queue: result.data.queue,\n                    image: result.data.link\n                });\n                if (this.state.image !== \"\") {\n                    clearInterval (this.state.timer)\n                    this.setState ({\n                        isLoading: false\n                    });\n                }\n            }).catch (error => {\n                console.log (error)\n                clearInterval (this.state.timer)\n                this.setState ({\n                    isLoading: false\n                });\n            });\n        }, 1000);\n    }\n\n    toggleButtonState = () => {\n        this.setState ({\n            isLoading: true\n        });\n        let fdata = new FormData ();\n        this.state.filesUpload.forEach(function(d){\n            console.log(d)\n            fdata.append ('fileUpload', d);\n        })\n        let data = {\n            width: this.state.width,\n            height: this.state.height,\n            shapes: this.state.shapes,\n            type: this.state.imageType,\n            shapeStroke: this.state.shapeStroke,\n            triangulate: this.state.triangulate,\n            triangulateBefore: this.state.triangulateBefore,\n            strokeThickness: this.state.strokeThickness,\n            blurAmount: this.state.blurAmount,\n            min: this.state.min,\n            max: this.state.max,\n        }\n        for (const [key, value] of Object.entries (data)) {\n            fdata.append (key, value)\n        }\n        axios.post ('/api/v1/generate', fdata,\n            {\n                headers: {\n                    \"Content-type\": \"multipart/form-data\",\n                }\n            },).then (result => {\n            this.setState ({\n                queue: result.data.queue,\n                identifier: result.data.identifier,\n            });\n            this.poll ()\n        }).catch (error => {\n            console.log (error)\n        });\n    };\n\n    render() {\n        let queueHolder = \"\"\n        if (this.state.image !== \"\") {\n            queueHolder = <Image src={this.state.image} fluid/>\n        } else if (this.state.queue > 0) {\n            queueHolder = <div>Rendering, you are {this.state.queue} in the queue.</div>\n        } else if (this.state.queue === 0) {\n            queueHolder = <div>Rendering, your image is being generated.</div>\n        }\n        let shapeOptions = \"\"\n        if (this.state.shapes) {\n            shapeOptions = (<Row>\n                    <Col md={12}>\n                        <Form.Group>\n                            <Form.Check checked={this.state.triangulateBefore} onChange={this.handleInputChange}\n                                        name=\"triangulateBefore\"\n                                        label=\"Triangulate before shapes\" type=\"checkbox\" id={`TriangulateBefore`}/>\n                        </Form.Group>\n                        <Form.Group controlId=\"shapeVertexMin\">\n                            <Form.Label>Minimum number of vertices: {this.state.min}</Form.Label>\n                            <Form.Control min=\"3\" max=\"10\" name=\"min\" value={this.state.min}\n                                          onChange={this.handleInputChange} type=\"range\"/>\n                        </Form.Group>\n                        <Form.Group controlId=\"shapeVertexMax\">\n                            <Form.Label>Maximum number of vertices: {this.state.max}</Form.Label>\n                            <Form.Control min=\"3\" max=\"10\" name=\"max\" value={this.state.max}\n                                          onChange={this.handleInputChange} type=\"range\"/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Check checked={this.state.shapeStroke} onChange={this.handleInputChange}\n                                        name=\"shapeStroke\"\n                                        label=\"Add a stroke to shapes\" type=\"checkbox\" id={`Shapes`}/>\n                        </Form.Group>\n                        <Form.Group controlId=\"strokeThickness\">\n                            <Form.Label>Stroke thickness</Form.Label>\n                            <Form.Control min=\"1\" max=\"10\" name=\"strokeThickness\" value={this.state.strokeThickness}\n                                          onChange={this.handleInputChange} type=\"range\"/>\n                        </Form.Group>\n                    </Col>\n                </Row>\n            );\n        }\n        let imageUpload = \"\"\n        if (this.state.imageType === \"upload\") {\n            let imageUploadLabel = \"Select a file\"\n            if (this.state.fileUpload === null) {\n                imageUploadLabel = \"Selected file\"\n            }\n            imageUpload = (<Form.Group>\n                <Form.Group>\n                    <Form.File id=\"fileUpload\" name=\"fileUpload\" label={imageUploadLabel}\n                               onChange={this.onFileChange}/>\n                </Form.Group>\n            </Form.Group>);\n        }\n        // Generate an image\n        // Pick colors\n        return (\n            <Container fluid>\n                <Row>\n                    <Col md={12}>\n                        <Title/>\n                    </Col>\n                    <Col md={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label column mb={12}>\n                                    An image is used as a starting point\n                                </Form.Label>\n                                <div key={`inline-radio`} className=\"mb-12\">\n                                    <Form.Check name=\"imageType\" inline label=\"Upload an image\" type=\"radio\"\n                                                id={`inline-radio-1`} value={`upload`}\n                                                checked={this.state.imageType === \"upload\"}\n                                                onChange={this.handleInputChange}/>\n                                    <Form.Check name=\"imageType\" inline label=\"Use a random image\" type=\"radio\"\n                                                id={`inline-radio-2`} value={'random'}\n                                                checked={this.state.imageType === \"random\"}\n                                                onChange={this.handleInputChange}/>\n                                </div>\n                            </Form.Group>\n                            {imageUpload}\n                            <Row>\n                                <Col md={6}>\n                                    <Form.Group controlId=\"widthGroup\">\n                                        <Form.Label>Width</Form.Label>\n                                        <Form.Control value={this.state.width} onChange={this.handleInputChange}\n                                                      name={`width`}\n                                                      type=\"Text\"/>\n\n                                    </Form.Group>\n                                </Col>\n                                <Col md={6}>\n                                    <Form.Group controlId=\"heightGroup\">\n                                        <Form.Label>Height</Form.Label>\n                                        <Form.Control value={this.state.height} onChange={this.handleInputChange}\n                                                      name={`height`} type=\"Text\"/>\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <Form.Group>\n                                <Form.Check checked={this.state.triangulate} onChange={this.handleInputChange}\n                                            name=\"triangulate\"\n                                            label=\"Triangulate (not implemented)\" type=\"checkbox\" id={`Triangulate`}/>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Check checked={this.state.shapes} onChange={this.handleInputChange} name=\"shapes\"\n                                            label=\"Add Shapes (Always)\" type=\"checkbox\" id={`Shapes`}/>\n                            </Form.Group>\n                            {shapeOptions}\n                            <Form.Group controlId=\"BlurAmount\">\n                                <Form.Label>Blur amount</Form.Label>\n                                <Form.Control min=\"1\" max=\"10\" name=\"blurAmount\" value={this.state.blurAmount}\n                                              onChange={this.handleInputChange} type=\"range\"/>\n                            </Form.Group>\n                            <Form.Group>\n                                <Button\n                                    disabled={this.state.isLoading}\n                                    onClick={this.toggleButtonState}\n                                    variant=\"primary\">Generate!</Button>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        {queueHolder}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        This project uses ideas and code from <a\n                        href=\"https://github.com/esimov/triangle\">github.com/esimov/triangle</a> and <a\n                        href=\"https://github.com/preslavrachev/generative-art-in-go\">github.com/preslavrachev/generative-art-in-go</a>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    componentWillUnmount() {\n        this.timer = null;\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}