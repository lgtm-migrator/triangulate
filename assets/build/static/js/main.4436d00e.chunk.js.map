{"version":3,"sources":["components/Title.js","App.js","reportWebVitals.js","index.js"],"names":["Title","React","createElement","App","props","onFileChange","event","files","Array","from","target","setState","filesUpload","console","log","state","toggleButtonState","isLoading","randomImage","fdata","FormData","forEach","d","append","data","width","height","shapes","type","imageType","shapeStroke","triangulate","triangulateBefore","strokeThickness","complexityAmount","min","max","maxPoints","pointsThreshold","sobelThreshold","triangulateWireframe","triangulateNoise","triangulateGrayscale","Object","entries","key","value","axios","post","headers","then","result","queue","identifier","poll","catch","error","image","timer","thumbnail","user_link","user_location","user_name","dots","handleInputChange","bind","checked","name","parseInt","this","setInterval","get","link","description","clearInterval","alert","queueHolder","Image","src","fluid","media","Card","style","Img","variant","Body","Text","href","triangulateOptions","triangulateOptions2","triangulateOptions3","triangulateOptions4","triangulateOptions5","triangulateOptions6","triangulateOptions7","shapeOptions","shapeOptions2","shapeOptions3","shapeOptions4","Col","md","Form","Group","controlId","Label","Control","onChange","strokeWidth","Check","label","id","Row","imageUpload","imageUploadLabel","fileUpload","File","Container","column","mb","className","inline","Button","disabled","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4436d00e.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title() {\n    return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"Triangulate.xyz - Randomly Generated Art\"));\n}\n\nexport default Title","import './App.scss';\nimport React from \"react\";\nimport Title from \"./components/Title\";\nimport {Button, Col, Container, Form, Image, Row, Card} from \"react-bootstrap\";\nimport axios from \"axios\"\n\nclass App extends React.Component {\n    constructor(props) {\n        super (props);\n\n        this.state = {\n            queue: null,\n            image: \"\",\n            timer: null,\n            identifier: \"\",\n            isLoading: false,\n            width: 1200,\n            height: 675,\n            shapes: true,\n            shapeStroke: true,\n            triangulate: false,\n            triangulateBefore: false,\n            strokeThickness: 5,\n            complexityAmount: 50,\n            min: 4,\n            max: 4,\n            imageType: \"random\",\n            filesUpload: null,\n            maxPoints: 2500,\n            pointsThreshold: 20,\n            sobelThreshold: 10,\n            triangulateWireframe: false,\n            triangulateNoise: false,\n            triangulateGrayscale: false,\n            randomImage: false,\n            thumbnail: \"\",\n            user_link: \"\",\n            user_location: \"\",\n            user_name: \"\",\n            dots: \".\"\n        };\n\n        this.handleInputChange = this.handleInputChange.bind (this);\n        this.onFileChange = this.onFileChange.bind (this)\n    }\n\n    onFileChange = event => {\n        const files = Array.from (event.target.files)\n        this.setState ({filesUpload: files});\n        console.log (this.state.filesUpload)\n    };\n\n    handleInputChange(event) {\n        const target = event.target;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        if (name === \"max\") {\n            if (parseInt (value) < parseInt (this.state.min)) {\n                value = this.state.min;\n            }\n        } else if (name === \"min\") {\n            if (parseInt (value) > parseInt (this.state.max)) {\n                value = this.state.max;\n            }\n        } else if (name === \"width\") {\n            if (value > 2000) {\n                value = 2000;\n            } else if (value < 0) {\n                value = 0;\n            }\n        } else if (name === \"height\") {\n            if (value > 2000) {\n                value = 2000;\n            } else if (value < 0) {\n                value = 0;\n            }\n        } else if (name === \"triangulate\") {\n            if (!value && !this.state.shapes) {\n                this.setState({\n                    shapes: true\n                })\n            }\n        } else if (name === \"shapes\") {\n            if (!value && !this.state.triangulate) {\n                this.setState({\n                    triangulate: true\n                })\n            }\n        }\n        this.setState ({\n            [name]: value\n        });\n    }\n\n    poll() {\n        this.state.timer = setInterval (() => {\n            axios.get ('/api/v1/generate/' + this.state.identifier).then (result => {\n                this.setState ({\n                    queue: result.data.queue,\n                    image: result.data.link\n                });\n                if (result.data.randomImage) {\n                    this.setState({\n                        randomImage: true,\n                        description: result.data.description,\n                        thumbnail: result.data.thumbnail,\n                        user_link: result.data.user_link,\n                        user_location: result.data.user_location,\n                        user_name: result.data.user_name,\n                    })\n                }\n                this.setState({\n                    dots: this.state.dots + \".\"\n                })\n                if (this.state.image !== \"\") {\n                    this.setState({\n                        dots: \".\"\n                    })\n                    clearInterval (this.state.timer)\n                    this.setState ({\n                        isLoading: false\n                    });\n                }\n            }).catch (error => {\n                alert(error)\n                clearInterval (this.state.timer)\n                this.setState ({\n                    isLoading: false,\n                    dots: \".\"\n                });\n            });\n        }, 1000);\n    }\n\n    toggleButtonState = () => {\n        this.setState ({\n            isLoading: true,\n            randomImage: false,\n        });\n        let fdata = new FormData ();\n        if (this.state.filesUpload != null) {\n            this.state.filesUpload.forEach (function (d) {\n                fdata.append ('fileUpload', d);\n            })\n        }\n        let data = {\n            width: this.state.width,\n            height: this.state.height,\n            shapes: this.state.shapes,\n            type: this.state.imageType,\n            shapeStroke: this.state.shapeStroke,\n            triangulate: this.state.triangulate,\n            triangulateBefore: this.state.triangulateBefore,\n            strokeThickness: this.state.strokeThickness,\n            complexityAmount: this.state.complexityAmount,\n            min: this.state.min,\n            max: this.state.max,\n            maxPoints: this.state.maxPoints,\n            pointsThreshold: this.state.pointsThreshold,\n            sobelThreshold: this.state.sobelThreshold,\n            triangulateWireframe: this.state.triangulateWireframe,\n            triangulateNoise: this.state.triangulateNoise,\n            triangulateGrayscale: this.state.triangulateGrayscale,\n        }\n        for (const [key, value] of Object.entries (data)) {\n            fdata.append (key, value)\n        }\n        axios.post ('/api/v1/generate', fdata,\n            {\n                headers: {\n                    \"Content-type\": \"multipart/form-data\",\n                }\n            },).then (result => {\n            this.setState ({\n                queue: result.data.queue,\n                identifier: result.data.identifier,\n            });\n            this.poll ()\n        }).catch (error => {\n            console.log (error)\n        });\n    };\n\n    render() {\n        let queueHolder = \"\"\n        if (this.state.image !== \"\") {\n            queueHolder = <Image src={this.state.image} fluid/>\n        } else if (this.state.queue > 0) {\n            queueHolder = <div>Rendering, you are {this.state.queue} in the queue.</div>\n        } else if (this.state.queue === 0) {\n            queueHolder = <div>Rendering, your image is being generated{this.state.dots}</div>\n        }\n        let media = \"\"\n\n        if (this.state.randomImage) {\n            media = (<Card style={{ width: '18rem' }}>\n                <Card.Img variant=\"left\" src={this.state.thumbnail}/>\n                <Card.Body>\n                    <Card.Title>Your random image</Card.Title>\n                    <Card.Text>\n                        {this.state.description}\n                        Photo by <a href={this.state.user_link}>{this.state.user_name}, {this.state.user_location}</a>\n                    </Card.Text>\n                </Card.Body>\n            </Card>)\n        }\n\n        let triangulateOptions, triangulateOptions2, triangulateOptions3, triangulateOptions4, triangulateOptions5, triangulateOptions6, triangulateOptions7, shapeOptions, shapeOptions2, shapeOptions3, shapeOptions4 = \"\"\n        if (this.state.triangulate) {\n            triangulateOptions = (<Col md={4}>\n                <Form.Group controlId=\"sobelThreshold\">\n                    <Form.Label>Sobel Threshold</Form.Label>\n                    <Form.Control min=\"5\" max=\"20\" name=\"sobelThreshold\" value={this.state.sobelThreshold}\n                                  onChange={this.handleInputChange} type=\"range\"/>\n                </Form.Group>\n            </Col>);\n            triangulateOptions2 = (<Col md={4}>\n                <Form.Group controlId=\"pointsThreshold\">\n                    <Form.Label>Points Threshold</Form.Label>\n                    <Form.Control min=\"10\" max=\"30\" name=\"pointsThreshold\" value={this.state.pointsThreshold}\n                                  onChange={this.handleInputChange} type=\"range\"/>\n                </Form.Group>\n            </Col>);\n            triangulateOptions3 = (<Col md={4}>\n                <Form.Group controlId=\"maxPoints\">\n                    <Form.Label>Max Points</Form.Label>\n                    <Form.Control min=\"500\" max=\"5000\" name=\"maxPoints\" value={this.state.maxPoints}\n                                  onChange={this.handleInputChange} type=\"range\"/>\n                </Form.Group>\n            </Col>);\n            triangulateOptions4 = (<Col md={4}>\n                <Form.Group controlId=\"strokeWidth\">\n                    <Form.Label>Stroke Width</Form.Label>\n                    <Form.Control min=\"1\" max=\"10\" name=\"strokeWidth\" value={this.state.strokeWidth}\n                                  onChange={this.handleInputChange} type=\"range\"/>\n                </Form.Group>\n            </Col>);\n            triangulateOptions5 = (<Col md={4}>\n                <Form.Group>\n                    <Form.Check checked={this.state.triangulateWireframe} onChange={this.handleInputChange}\n                                name=\"triangulateWireframe\"\n                                label=\"Wireframe\" type=\"checkbox\" id={`wireframe`}/>\n                </Form.Group>\n            </Col>);\n            triangulateOptions6 = (<Col md={4}>\n                <Form.Group>\n                    <Form.Check checked={this.state.triangulateNoise} onChange={this.handleInputChange}\n                                name=\"triangulateNoise\"\n                                label=\"Noise\" type=\"checkbox\" id={`noise`}/>\n                </Form.Group>\n            </Col>);\n            triangulateOptions7 = (<Col md={4}>\n                <Form.Group>\n                    <Form.Check checked={this.state.triangulateGrayscale} onChange={this.handleInputChange}\n                                name=\"triangulateGrayscale\"\n                                label=\"Grayscale\" type=\"checkbox\" id={`grayscale`}/>\n                </Form.Group>\n            </Col>);\n        }\n        if (this.state.shapes) {\n            shapeOptions = (<Col md={4}>\n                        <Row>\n                            <Col md={6}>\n                                <Form.Group controlId=\"shapeVertexMin\">\n                                    <Form.Label>Min vertices: {this.state.min}</Form.Label>\n                                    <Form.Control min=\"3\" max=\"10\" name=\"min\" value={this.state.min}\n                                                  onChange={this.handleInputChange} type=\"range\"/>\n                                </Form.Group>\n                            </Col>\n                            <Col md={6}>\n                                <Form.Group controlId=\"shapeVertexMax\">\n                                    <Form.Label>Max vertices: {this.state.max}</Form.Label>\n                                    <Form.Control min=\"3\" max=\"10\" name=\"max\" value={this.state.max}\n                                                  onChange={this.handleInputChange} type=\"range\"/>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                    </Col>);\n            shapeOptions2 = (<Col md={4}>\n                        <Form.Group>\n                            <Form.Check checked={this.state.shapeStroke} onChange={this.handleInputChange}\n                                        name=\"shapeStroke\"\n                                        label=\"Add a stroke to shapes\" type=\"checkbox\" id={`Shapes`}/>\n                        </Form.Group>\n            </Col>);\n            shapeOptions3 = (<Col md={4}>\n                        <Form.Group controlId=\"strokeThickness\">\n                            <Form.Label>Stroke thickness</Form.Label>\n                            <Form.Control min=\"1\" max=\"10\" name=\"strokeThickness\" value={this.state.strokeThickness}\n                                          onChange={this.handleInputChange} type=\"range\"/>\n                        </Form.Group>\n            </Col>);\n            if (this.state.triangulate) {\n                shapeOptions4 = (<Form.Group>\n                    <Form.Check checked={this.state.triangulateBefore} onChange={this.handleInputChange}\n                                name=\"triangulateBefore\"\n                                label=\"Triangulate before shapes\" type=\"checkbox\" id={`TriangulateBefore`}/>\n                </Form.Group>);\n            }\n        }\n        let imageUpload = \"\"\n        if (this.state.imageType === \"upload\") {\n            let imageUploadLabel = \"Select a file\"\n            if (this.state.fileUpload === null) {\n                imageUploadLabel = \"Selected file\"\n            }\n            imageUpload = (<Form.Group>\n                <Form.Group>\n                    <Form.File id=\"fileUpload\" name=\"fileUpload\" label={imageUploadLabel}\n                               onChange={this.onFileChange}/>\n                </Form.Group>\n            </Form.Group>);\n        }\n        // Generate an image\n        // Pick colors\n        return (\n            <Container>\n                <Row>\n                    <Col md={12}>\n                        <Title/>\n                    </Col>\n                    <Col md={12}>\n                        <Form>\n                            <Row>\n                                <Col md={6}>\n                                    <Form.Group>\n                                        <Form.Label column mb={12}>\n                                            An image is used as a starting point\n                                        </Form.Label>\n                                        <div key={`inline-radio`} className=\"mb-12\">\n                                            <Form.Check name=\"imageType\" inline label=\"Upload an image\" type=\"radio\"\n                                                        id={`inline-radio-1`} value={`upload`}\n                                                        checked={this.state.imageType === \"upload\"}\n                                                        onChange={this.handleInputChange}/>\n                                            <Form.Check name=\"imageType\" inline label=\"Use a random image\" type=\"radio\"\n                                                        id={`inline-radio-2`} value={'random'}\n                                                        checked={this.state.imageType === \"random\"}\n                                                        onChange={this.handleInputChange}/>\n                                        </div>\n                                    </Form.Group>\n                                    {imageUpload}\n                                </Col>\n                                <Col md={6}>\n                                    <Row>\n                                        <Col md={6}>\n\n                                            <Form.Group controlId=\"widthGroup\">\n                                                <Form.Label>Width</Form.Label>\n                                                <Form.Control value={this.state.width} onChange={this.handleInputChange}\n                                                              name={`width`}\n                                                              type=\"Text\"/>\n\n                                            </Form.Group>\n                                        </Col>\n                                        <Col md={6}>\n                                            <Form.Group controlId=\"heightGroup\">\n                                                <Form.Label>Height</Form.Label>\n                                                <Form.Control value={this.state.height}\n                                                              onChange={this.handleInputChange}\n                                                              name={`height`} type=\"Text\"/>\n                                            </Form.Group>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={4}>\n                            <Form.Group>\n                                <Form.Check checked={this.state.triangulate} onChange={this.handleInputChange}\n                                            name=\"triangulate\"\n                                            label=\"Triangulate\" type=\"checkbox\" id={`Triangulate`}/>\n                            </Form.Group>\n                                </Col>\n                                <Col md={4}>\n                            <Form.Group>\n                                <Form.Check checked={this.state.shapes} onChange={this.handleInputChange} name=\"shapes\"\n                                            label=\"Add Shapes\" type=\"checkbox\" id={`Shapes`}/>\n                            </Form.Group>\n                                </Col>\n                                {triangulateOptions5}\n                                {triangulateOptions6}\n                                {triangulateOptions7}\n                                {shapeOptions4}\n                                {shapeOptions2}\n                                <Col md={4}>\n                                    <Form.Group controlId=\"ComplexityAmount\">\n                                        <Form.Label>Complexity</Form.Label>\n                                        <Form.Control min=\"1\" max=\"100\" name=\"complexityAmount\" value={this.state.complexityAmount}\n                                                      onChange={this.handleInputChange} type=\"range\"/>\n                                    </Form.Group>\n                                </Col>\n                                {shapeOptions}\n                                {shapeOptions3}\n                                {triangulateOptions}\n                                {triangulateOptions2}\n                                {triangulateOptions3}\n                                {triangulateOptions4}\n                            </Row>\n                            <Form.Group>\n                                <Button\n                                    disabled={this.state.isLoading}\n                                    onClick={this.toggleButtonState}\n                                    variant=\"primary\">Generate!</Button>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        {queueHolder}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        <hr/>\n                        {media}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        <hr/>\n                        Created by <a href=\"https://github.com/uberswe\">Markus Tenghamn</a>\n                        <hr/>\n                        This project uses ideas and code from <a\n                        href=\"https://github.com/esimov/triangle\">github.com/esimov/triangle</a> and <a\n                        href=\"https://github.com/preslavrachev/generative-art-in-go\">github.com/preslavrachev/generative-art-in-go</a>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    componentWillUnmount() {\n        this.timer = null;\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}