{"version":3,"sources":["components/Title.js","App.js","reportWebVitals.js","index.js"],"names":["Title","React","createElement","App","props","toggleButtonState","setState","isLoading","axios","post","width","state","height","shapes","type","imageType","then","result","queue","data","identifier","poll","catch","error","console","log","image","timer","handleInputChange","bind","event","target","value","checked","name","this","setInterval","get","link","clearInterval","queueHolder","Image","src","fluid","Container","Row","Col","md","Form","Group","Label","column","mb","className","Check","inline","label","id","onChange","controlId","Control","Button","disabled","onClick","variant","href","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a3f4343.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Title() {\n    return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"Triangulate.xyz - Randomly Generated Art\"));\n}\n\nexport default Title","import './App.css';\nimport React from \"react\";\nimport Title from \"./components/Title\";\nimport {Button, Col, Container, Form, Image, Row} from \"react-bootstrap\";\nimport axios from \"axios\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super (props);\n\n        this.state = {\n            queue: null,\n            image: \"\",\n            timer: null,\n            identifier: \"\",\n            isLoading: false,\n            width: 1200,\n            height: 675,\n            shapes: true,\n            imageType: \"upload\"\n        };\n\n        this.handleInputChange = this.handleInputChange.bind (this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState ({\n            [name]: value\n        });\n    }\n\n    poll() {\n        this.state.timer = setInterval (() => {\n            axios.get ('/api/v1/generate/' + this.state.identifier).then (result => {\n                this.setState ({\n                    queue: result.data.queue,\n                    image: result.data.link\n                });\n                if (this.state.image !== \"\") {\n                    clearInterval (this.state.timer)\n                    this.setState ({\n                        isLoading: false\n                    });\n                }\n            }).catch (error => {\n                console.log (error)\n                clearInterval (this.state.timer)\n                this.setState ({\n                    isLoading: false\n                });\n            });\n        }, 1000);\n    }\n\n    toggleButtonState = () => {\n        this.setState ({\n            isLoading: true\n        });\n        axios.post ('/api/v1/generate', {\n            width: this.state.width,\n            height: this.state.height,\n            shapes: this.state.shapes,\n            type: this.state.imageType\n        }).then (result => {\n            this.setState ({\n                queue: result.data.queue,\n                identifier: result.data.identifier,\n            });\n            this.poll ()\n        }).catch (error => {\n            console.log (error)\n        });\n    };\n\n    render() {\n        let queueHolder\n        if (this.state.image !== \"\") {\n            queueHolder = <Image src={this.state.image} fluid/>\n        } else if (this.state.queue > 0) {\n            queueHolder = <div>Rendering, you are {this.state.queue} in the queue.</div>\n        } else if (this.state.queue === 0) {\n            queueHolder = <div>Rendering, your image is being generated.</div>\n        }\n        return (\n            <Container fluid>\n                <Row>\n                    <Col md={12}>\n                        <Title/>\n                    </Col>\n                    <Col md={6}>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label column mb={12}>\n                                    An image is used as a starting point\n                                </Form.Label>\n                                <div key={`inline-radio`} className=\"mb-12\">\n                                    <Form.Check name=\"imageType\" inline label=\"Upload an image\" type=\"radio\"\n                                                id={`inline-radio-1`} value={`upload`}\n                                                onChange={this.handleInputChange}/>\n                                    <Form.Check name=\"imageType\" inline label=\"Use a random image\" type=\"radio\"\n                                                id={`inline-radio-2`} value={'random'}\n                                                onChange={this.handleInputChange}/>\n                                </div>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Check checked={this.state.shapes} onChange={this.handleInputChange} name=\"shapes\"\n                                            label=\"Add Shapes\" type=\"checkbox\" id={`Shapes`}/>\n                            </Form.Group>\n                            <Form.Group controlId=\"sizeGroup\">\n                                <Form.Label>Width</Form.Label>\n                                <Form.Control value={this.state.width} onChange={this.handleInputChange} name={`width`}\n                                              type=\"Text\"/>\n                                <Form.Label>Height</Form.Label>\n                                <Form.Control value={this.state.height} onChange={this.handleInputChange}\n                                              name={`height`} type=\"Text\"/>\n                            </Form.Group>\n                            // Edge Count of shapes\n                            // Stroke shapes true/false\n                            // Stroke size\n                            // Blur amount\n                            // Triangulate bool\n                            // Shapes before or after triangulating?\n\n                            // Generate an image\n                            // Pick colors\n\n                            <Form.Group>\n                                <Button\n                                    disabled={this.state.isLoading}\n                                    onClick={this.toggleButtonState}\n                                    variant=\"primary\">Generate!</Button>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        {queueHolder}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        This project uses ideas and code from <a href=\"https://github.com/esimov/triangle\">github.com/esimov/triangle</a> and <a href=\"https://github.com/preslavrachev/generative-art-in-go\">github.com/preslavrachev/generative-art-in-go</a>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    componentWillUnmount() {\n        this.timer = null;\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}